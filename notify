--nigga its not main script its only notifyðŸ˜­



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local NotifGui = Instance.new("ScreenGui")
NotifGui.Name = "AkaliNotif"
NotifGui.ResetOnSpawn = false
NotifGui.Parent = Player:WaitForChild("PlayerGui")

local Container = Instance.new("Frame")
Container.Name = "Container"
Container.Position = UDim2.new(0, 20, 0.5, -150)
Container.Size = UDim2.new(0, 300, 0, 300)
Container.BackgroundTransparency = 1
Container.Parent = NotifGui

local function Image(ID, Button)
	local NewImage = Instance.new(string.format("Image%s", Button and "Button" or "Label"))
	NewImage.Image = ID
	NewImage.BackgroundTransparency = 1
	return NewImage
end

local function Round2px()
	local NewImage = Image("http://www.roblox.com/asset/?id=5761488251")
	NewImage.ScaleType = Enum.ScaleType.Slice
	NewImage.SliceCenter = Rect.new(2, 2, 298, 298)
	NewImage.ImageColor3 = Color3.fromRGB(30, 30, 30)
	return NewImage
end

local function Shadow2px()
	local NewImage = Image("http://www.roblox.com/asset/?id=5761498316")
	NewImage.ScaleType = Enum.ScaleType.Slice
	NewImage.SliceCenter = Rect.new(17, 17, 283, 283)
	NewImage.Size = UDim2.fromScale(1, 1) + UDim2.fromOffset(30, 30)
	NewImage.Position = -UDim2.fromOffset(15, 15)
	NewImage.ImageColor3 = Color3.fromRGB(30, 30, 30)
	return NewImage
end

local Padding = 10
local DescriptionPadding = 10
local InstructionObjects = {}
local TweenTime = 1
local TweenStyle = Enum.EasingStyle.Sine
local TweenDirection = Enum.EasingDirection.Out

local LastTick = tick()

local function CalculateBounds(TableOfObjects)
	local X, Y = 0, 0
	for _, Object in ipairs(TableOfObjects) do
		X += Object.AbsoluteSize.X
		Y += Object.AbsoluteSize.Y
	end
	return {X = X, Y = Y}
end

local CachedObjects = {}

local function Update()
	local DeltaTime = tick() - LastTick
	local PreviousObjects = {}
	for _, Object in ipairs(InstructionObjects) do
		local Label, Delta, Done = Object[1], Object[2], Object[3]
		if not Done then
			if Delta < TweenTime then
				Object[2] = math.clamp(Delta + DeltaTime, 0, 1)
			else
				Object[3] = true
			end
		end
		local NewValue = TweenService:GetValue(Object[2], TweenStyle, TweenDirection)
		local TargetPos = UDim2.new(0, 0, 0, CalculateBounds(PreviousObjects).Y + (#PreviousObjects * Padding))
		Label.Position = Label.Position:Lerp(TargetPos, NewValue)
		table.insert(PreviousObjects, Label)
	end
	CachedObjects = PreviousObjects
	LastTick = tick()
end

RunService:BindToRenderStep("UpdateList", 0, Update)

local TitleSettings = { Font = Enum.Font.GothamSemibold, Size = 14 }
local DescriptionSettings = { Font = Enum.Font.Gotham, Size = 14 }

local function Label(Text, Font, Size, Button)
	local Label = Instance.new(string.format("Text%s", Button and "Button" or "Label"))
	Label.Text = Text
	Label.Font = Font
	Label.TextSize = Size
	Label.BackgroundTransparency = 1
	Label.TextXAlignment = Enum.TextXAlignment.Left
	Label.RichText = true
	Label.TextColor3 = Color3.fromRGB(255, 255, 255)
	return Label
end

local function TitleLabel(Text)
	return Label(Text, TitleSettings.Font, TitleSettings.Size)
end

local function DescriptionLabel(Text)
	return Label(Text, DescriptionSettings.Font, DescriptionSettings.Size)
end

local function FadeProperty(Object)
	local PropMap = {
		TextLabel = "TextTransparency",
		TextButton = "TextTransparency",
		ImageLabel = "ImageTransparency",
		ImageButton = "ImageTransparency",
		Frame = "BackgroundTransparency"
	}
	local Prop = PropMap[Object.ClassName]
	if Prop then
		TweenService:Create(Object, TweenInfo.new(0.25, TweenStyle, TweenDirection), { [Prop] = 1 }):Play()
	end
end

local function FadeOutAfter(Object, Seconds)
	task.wait(Seconds)
	FadeProperty(Object)
	for _, Descendant in ipairs(Object:GetDescendants()) do
		FadeProperty(Descendant)
	end
	task.wait(0.25)
	for i, v in ipairs(InstructionObjects) do
		if v[1] == Object then
			table.remove(InstructionObjects, i)
			break
		end
	end
end

return {
	Notify = function(Properties)
		local Title = Properties.Title
		local Description = Properties.Description
		local Duration = Properties.Duration or 5
		if Title or Description then
			local Y = Title and 26 or 0
			if Description then
				local TextSize = TextService:GetTextSize(Description, DescriptionSettings.Size, DescriptionSettings.Font, Vector2.new(280, math.huge))
				Y += TextSize.Y + 8
			end
			local NewLabel = Round2px()
			NewLabel.Size = UDim2.new(1, 0, 0, Y)
			NewLabel.Position = UDim2.new(0, 20, 0, CalculateBounds(CachedObjects).Y + (#CachedObjects * Padding))
			if Title then
				local NewTitle = TitleLabel(Title)
				NewTitle.Size = UDim2.new(1, -10, 0, 26)
				NewTitle.Position = UDim2.fromOffset(10, 0)
				NewTitle.Parent = NewLabel
			end
			if Description then
				local NewDescription = DescriptionLabel(Description)
				NewDescription.TextWrapped = true
				NewDescription.Size = UDim2.fromScale(1, 1) + UDim2.fromOffset(-DescriptionPadding, Title and -26 or 0)
				NewDescription.Position = UDim2.fromOffset(10, Title and 26 or 0)
				NewDescription.TextYAlignment = Enum.TextYAlignment[Title and "Top" or "Center"]
				NewDescription.Parent = NewLabel
			end
			Shadow2px().Parent = NewLabel
			NewLabel.Parent = Container
			table.insert(InstructionObjects, {NewLabel, 0, false})
			coroutine.wrap(FadeOutAfter)(NewLabel, Duration)
		end
	end
}
